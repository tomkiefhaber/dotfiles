" Configuration related to plugins
" --------------------------------
"
" This file should be loaded only if the &loadplugins options is set
" If we start up vim with --noplugins then we get faster startup, but some of
" the commands in this file might error if the plugins aren't loaded.

" vim-addon-local-vimrc plugin
let g:local_vimrc = { 'names': ['local.vim'] }

" Blockle Plugin
let g:blockle_mapping = '<Leader>d'

" NerdTree Plugin
command NT :NERDTreeToggle
command NTF :NERDTreeFind
nnoremap <silent> <Leader>n :NT<cr>

" Use instead of Netrw when doing an edit /foobar
let NERDTreeHijackNetrw=1
" Single click for everything
let NERDTreeMouseMode=1
" Hide javascript files in nerdtree
command Nojs :let NERDTreeIgnore=[".js$"]

" CtrlP plugin
let g:ctrlp_map = '<Leader>e'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = '\vvendor$|node_modules$|tmp$|\.git$|\.hg$|\.svn$|build$'
let g:ctrlp_prompt_mappings = {
  \ 'PrtSelectMove("j")':   ['<c-j>', '<c-n>'],
  \ 'PrtSelectMove("k")':   ['<c-k>', '<c-p>'],
  \ 'PrtHistory(-1)':       ['<down>'],
  \ 'PrtHistory(1)':        ['<up>'],
  \ 'MarkToOpen()':         ['<c-a>'],
  \ }
map <Leader>f :CtrlPCurFile<CR>
map <Leader>r :CtrlPMRUFiles<CR>
map <Leader>b :CtrlPBuffer<CR>
map <Leader>g :CtrlPLine<CR>
map <Leader>t :CtrlPBufTag<CR>
map <Leader>T :CtrlPBufTagAll<CR>
" map <Leader>c :CtrlPChange<CR>
" map <Leader>C :CtrlPChangeAll<CR>

" skip AlignMaps default mappings
let g:loaded_AlignMapsPlugin = 1

" Git interaction
nmap gs :Gstatus<CR>
nmap gb :Gblame<CR>
" Gitv browser mode (shows git log for repo)
nmap gl :Gitv --all<CR>
" Gitv file mode (shows git history for current file)
nmap gL :Gitv! --all<CR>
vmap gL :Gitv! --all<CR>

" Jekyll plugin config
let g:jekyll_path = "~/Projects/tomkiefhaber.github.com"

" IndentGuides plugin config
let g:indent_guides_guide_size  = 1
let g:indent_guides_start_level = 2
let g:indent_guides_auto_colors = 0
autocmd VimEnter * IndentGuidesEnable
hi IndentGuidesOdd  guibg=#003540  ctermbg=0
hi IndentGuidesEven guibg=#003540  ctermbg=0

" YankRing plugin config
nmap yr :YRShow<CR>
nmap yc :YRClear<CR>
nmap yp p:YRPop<CR>
nmap yP P:YRPop<CR>
let g:yankring_min_element_length = 2

" tComment
" Disable all of the default mappings
let g:tcommentMapLeader1   = ""
let g:tcommentMapLeader2   = ""
let g:tcommentMapLeaderOp1 = ""
let g:tcommentMapLeaderOp2 = ""
" Create the only ones that matters
noremap <silent> <Leader>c :TComment<cr>

" peep open ********************************************************
" map <unique> <silent> <Leader>f <Plug>PeepOpen

" autocomplpop ***************************************************************
" complete option
"set complete=.,w,b,u,t,k
"let g:AutoComplPop_CompleteOption = '.,w,b,u,t,k'
"set complete=.
let g:AutoComplPop_IgnoreCaseOption = 0
let g:AutoComplPop_BehaviorKeywordLength = -1
let g:AutoComplPop_MappingDriven=1

" AutoClose config
let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"'}

" session plugin
let g:session_directory = "~/.vim_sessions"
let g:session_default_to_last = 1
let g:session_autoload = 'no'
let g:session_autosave = 'no'

nmap <F2> :OpenSession<CR>

" Universal Text Linking plugin
" let g:utl_cfg_hdl_scm_http_system = "silent !open -a Choosy '%u#%f'"
let g:utl_cfg_hdl_scm_http_system = "silent !open -a Choosy '%u'"

" Powerline
" Need the monaco font w/ powerline enhancements?
"   http://gist.github.com/1634235
let g:Powerline_symbols = 'fancy'

" signature plugin
" Not config for the plugin, just coloring for it.
hi! link SignColumn LineNr

" ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" tmux/rspec related config
nnoremap <Leader>RF :cgetfile tmp/quickfix \| copen<cr>
let g:TmuxTargetSession = "/tmp/side"
let g:TmuxTargetPane    = "1.0"
let g:TmuxRspecOpts     = "--require ./.rspec/quickfix_formatter --format QuickfixFormatter:tmp/quickfix --require ./.rspec/progress_with_failures --format ProgressWithFailures --colour --loadby mtime --drb"
set errorformat=%f:%l\ %n\ %m

